// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String         @id @default(cuid())
    clerkId   String         @unique
    name      String?
    email     String         @unique
    imageUrl  String?
    role      String         @default("user")
    posts     Post[]         @relation("AuthorPosts")
    bookmarks Bookmark[]
    likes     Like[]
    profile   AuthorProfile? @relation("UserAuthorProfile")
    profileId String?
}

model AuthorProfile {
    id            String  @id @default(cuid())
    name          String  @unique
    bio           String?
    twitterLink   String?
    instagramLink String?
    linkedinLink  String?
    user          User    @relation("UserAuthorProfile", fields: [userId], references: [id], onDelete: Cascade)
    userId        String  @unique
    posts         Post[]  @relation("AuthorProfilePosts")
}

model Post {
    id         String         @id @default(cuid())
    title      String
    slug       String         @unique
    excerpt    String?
    content    String
    imageUrl   String
    published  Boolean        @default(false)
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    author     User           @relation("AuthorPosts", fields: [authorId], references: [clerkId], onDelete: Cascade)
    authorId   String
    profile    AuthorProfile? @relation("AuthorProfilePosts", fields: [profileId], references: [id], onDelete: Cascade)
    profileId  String?
    tags       PostTag[]
    likes      Like[]
    bookmarks  Bookmark[]
    category   Category?      @relation(fields: [categoryId], references: [id])
    categoryId String?
}

model Category {
    id    String @id @default(cuid())
    name  String @unique
    slug  String @unique
    posts Post[]
}

model Tag {
    id      String    @id @default(cuid())
    tagName String    @unique
    posts   PostTag[]
}

model PostTag {
    id     String @id @default(cuid())
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String
    tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId  String

    @@unique([postId, tagId]) // Prevent duplicate tags on same post
}

model Like {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@unique([userId, postId]) // Only one like per user per post
}

model Bookmark {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@unique([userId, postId]) // Only one bookmark per user per post
}
